////  MKStoreManager.m////  Created by Mugunth Kumar on 17-Oct-09.//  Copyright 2009 Mugunth Kumar. All rights reserved.//  mugunthkumar.com//#import "MKStoreManager.h"#import "GTMBase64.h"@implementation MKStoreManager@synthesize purchasableObjects;@synthesize storeObserver;@synthesize delegate;// all your features should be managed one and only by StoreManagerstatic NSString *featureId1 = @"com.bingxigua.thegodsoul.pay.1";static NSString *featureId2 = @"com.bingxigua.thegodsoul.pay.2";static NSString *featureId3 = @"com.bingxigua.thegodsoul.pay.3";static NSString *featureId4 = @"com.bingxigua.thegodsoul.pay.4";static NSString *featureId5 = @"com.bingxigua.thegodsoul.pay.5";static NSString *featureId6 = @"com.bingxigua.thegodsoul.pay.6";static NSString *featureId7 = @"com.bingxigua.thegodsoul.pay.7";static NSString *featureId8 = @"com.bingxigua.thegodsoul.pay.8";static NSString *featureId9 = @"com.bingxigua.thegodsoul.pay.9";BOOL featureAPurchased;BOOL featureBPurchased;static MKStoreManager* _sharedStoreManager; // self- (void)dealloc {		[_sharedStoreManager release];	[storeObserver release];	[super dealloc];}+ (BOOL) featurePurchased {		return NO;}+ (MKStoreManager*)sharedManager{	@synchronized(self) {		        if (_sharedStoreManager == nil) {			            [[self alloc] init]; // assignment not done here			_sharedStoreManager.purchasableObjects = [[NSMutableArray alloc] init];						[_sharedStoreManager requestProductData];						[MKStoreManager loadPurchases];			_sharedStoreManager.storeObserver = [[MKStoreObserver alloc] init];			[[SKPaymentQueue defaultQueue] addTransactionObserver:_sharedStoreManager.storeObserver];        }    }    return _sharedStoreManager;}#pragma mark Singleton Methods+ (id)allocWithZone:(NSZone *)zone{	    @synchronized(self) {		        if (_sharedStoreManager == nil) {			            _sharedStoreManager = [super allocWithZone:zone];			            return _sharedStoreManager;  // assignment and return on first allocation        }    }	    return nil; //on subsequent allocation attempts return nil	}- (id)copyWithZone:(NSZone *)zone{    return self;	}- (id)retain{	    return self;	}- (unsigned)retainCount{    return UINT_MAX;  //denotes an object that cannot be released}- (void)release{    //do nothing}- (id)autorelease{    return self;	}- (void) requestProductData{	SKProductsRequest *request= [[SKProductsRequest alloc] initWithProductIdentifiers: 								 [NSSet setWithObjects: featureId1, featureId2,featureId3,featureId4,featureId5,featureId6,featureId7,featureId8,featureId9, nil]]; // add any other product here	request.delegate = self;	[request start];}- (void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response{	[purchasableObjects addObjectsFromArray:response.products];	// populate your UI Controls here	for(int i=0;i<[purchasableObjects count];i++)	{				SKProduct *product = [purchasableObjects objectAtIndex:i];		NSLog(@"Feature: %@, Cost: %f, ID: %@",[product localizedTitle],			  [[product price] doubleValue], [product productIdentifier]);	}		[request autorelease];}- (void) ReqbuyFeature:(int) Rid{    [delegate start];            NSString*  featureId;    switch (Rid) {        case 1:            featureId=featureId1;            break;        case 2:            featureId=featureId2;            break;        case 3:            featureId=featureId3;            break;        case 4:            featureId=featureId4;            break;        case 5:            featureId=featureId5;            break;        case 6:            featureId=featureId6;            break;        case 7:            featureId=featureId7;            break;        case 8:            featureId=featureId8;            break;        case 9:            featureId=featureId9;            break;        default:            return;    }	[self buyFeature:featureId];}- (void) buyFeature:(NSString*) featureId{	if ([SKPaymentQueue canMakePayments])	{		SKPayment *payment = [SKPayment paymentWithProductIdentifier:featureId];		[[SKPaymentQueue defaultQueue] addPayment:payment];	}	else	{		UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"MyApp" message:@"You are not authorized to purchase from AppStore",nil];		[alert show];		[alert release];        [delegate stop];	}}-(void)paymentCanceled{ 		[delegate failed];}- (void) failedTransaction: (SKPaymentTransaction *)transaction{ 		[delegate failed];		NSString *messageToBeShown = [NSString stringWithFormat:@"Reason: %@, You can try: %@", [transaction.error localizedFailureReason], [transaction.error localizedRecoverySuggestion]];	UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Unable to complete your purchase" message:messageToBeShown,nil];	[alert show];	[alert release];}-(void) provideContent: (SKPaymentTransaction *)transaction{    [_sharedStoreManager.delegate productPurchased];         NSString *recepit = [GTMBase64 stringByEncodingData:transaction.transactionReceipt];  	NSDictionary* data = [NSDictionary dictionaryWithObjectsAndKeys:recepit, @"receipt-data", nil];	const char  * nameStr =[recepit UTF8String];    //NSLog("%@",nameStr);    int nLen=strlen(nameStr);        NSString* productIdentifier = transaction.payment.productIdentifier;	    }+(void) loadPurchases {	NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];	 }+(void) updatePurchases{	NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];}@end